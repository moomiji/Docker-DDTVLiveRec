name: DDTV_Docker_Release

on:
  release:
    types: [released]
  watch: # 合并删除
    types: [started]
  push:
    branches: [master]
    paths:
      - 'Docker/**'
      - '!Docker/**/README.md'
      - '.github/workflows/DDTV_Docker_Release.yml'
      - '.github/workflows/Docker_Build_Push.yml'

jobs:
  Prepare:
    runs-on: ubuntu-latest
    steps:
      - name: Output Version
        id: version
        run: |
          Version=$(curl -sX GET "https://api.github.com/repos/CHKZL/DDTV/releases/latest" | awk '/tag_name/{print $4}' FS='["]')
          Version_major=$(echo "${Version%%.*}" | sed 's/[^0-9]//g')
          Version_minor=${Version#*.}
          echo ::set-output name=all::"${Version_major}.${Version_minor}"
          echo ::set-output name=two::"${Version_major}.${Version_minor%%.*}"
    outputs:
      verall: ${{ steps.version.outputs.all }} # all="3.0.1.9"
      vertwo: ${{ steps.version.outputs.two }} # two="3.0"
      DOTNET_VERSION: '6.0' # 只允许 '*.*'
      DOCKER_DIR: ./Docker
      DEPS_PROJECT: ddtv/deps
      CLI_PROJECT: ddtv/cli
      BACK_END_PROJECT: ddtv/webserver
      FRONT_END_PROJECT: ddtv/webui
      PLATFORMS: linux/amd64, linux/arm64, linux/arm/v7
# *_PROJECT 为项目名兼路径名，更改后记得修改 文件存放位置 和 prepare.sh

# jobs.<job_id>.with.<with_id>上下文不支持env, 仅支持 github, needs
  WEBUI_Nginx-Alpine:
    if: false
    needs: [Prepare]
    uses: ./.github/workflows/Docker_Build_Push.yml
    with:
      os_id:      alpine
      verall:     ${{ needs.Prepare.outputs.verall }}
      vertwo:     ${{ needs.Prepare.outputs.vertwo }}
      images:     ghcr.io/${{ github.actor }}/${{ needs.Prepare.outputs.FRONT_END_PROJECT }}
      project:    ${{ needs.Prepare.outputs.FRONT_END_PROJECT }}
      platforms:  linux/amd64, linux/arm64, linux/arm/v7, linux/386, linux/arm/v6, linux/ppc64le, linux/s390x
      docker-dir: ${{ needs.Prepare.outputs.DOCKER_DIR }}

# alpine
  Deps_Alpine:
    needs: [Prepare]
    uses: ./.github/workflows/Docker_Build_Push.yml
    with:
      os_id:      alpine
      verall:     ${{ needs.Prepare.outputs.verall }}
      vertwo:     ${{ needs.Prepare.outputs.vertwo }}
      images:     ghcr.io/${{ github.actor }}/${{ needs.Prepare.outputs.DEPS_PROJECT }}
      project:    ${{ needs.Prepare.outputs.DEPS_PROJECT }}
      platforms:  linux/amd64 # ${{ needs.Prepare.outputs.PLATFORMS }}
      docker-dir: ${{ needs.Prepare.outputs.DOCKER_DIR }}
      build-args: DOTNET_VERSION=${{ needs.Prepare.outputs.DOTNET_VERSION }}

  CLI_Alpine:
    needs: [Prepare, Deps_Alpine]
    uses: ./.github/workflows/Docker_Build_Push.yml
    with:
      os_id:      alpine
      verall:     ${{ needs.Prepare.outputs.verall }}
      vertwo:     ${{ needs.Prepare.outputs.vertwo }}
      images:     ghcr.io/${{ github.actor }}/${{ needs.Prepare.outputs.CLI_PROJECT }}
      project:    ${{ needs.Prepare.outputs.CLI_PROJECT }}
      platforms:  linux/amd64 # ${{ needs.Prepare.outputs.PLATFORMS }}
      docker-dir: ${{ needs.Prepare.outputs.DOCKER_DIR }}
      build-args: REPO=ghcr.io/${{ github.actor }}/${{ needs.Prepare.outputs.DEPS_PROJECT }}:latest-alpine

  WEBServer_Alpine:
    needs: [Prepare, Deps_Alpine]
    uses: ./.github/workflows/Docker_Build_Push.yml
    with:
      os_id:      alpine
      verall:     ${{ needs.Prepare.outputs.verall }}
      vertwo:     ${{ needs.Prepare.outputs.vertwo }}
      images:     ghcr.io/${{ github.actor }}/${{ needs.Prepare.outputs.BACK_END_PROJECT }}
      project:    ${{ needs.Prepare.outputs.BACK_END_PROJECT }}
      platforms:  linux/amd64 # ${{ needs.Prepare.outputs.PLATFORMS }}
      docker-dir: ${{ needs.Prepare.outputs.DOCKER_DIR }}
      build-args: REPO=ghcr.io/${{ github.actor }}/${{ needs.Prepare.outputs.DEPS_PROJECT }}:latest-alpine

# debian
  Deps_Debian:
    needs: [Prepare]
    uses: ./.github/workflows/Docker_Build_Push.yml
    with:
      os_id:      debian
      verall:     ${{ needs.Prepare.outputs.verall }}
      vertwo:     ${{ needs.Prepare.outputs.vertwo }}
      images:     ghcr.io/${{ github.actor }}/${{ needs.Prepare.outputs.DEPS_PROJECT }}
      project:    ${{ needs.Prepare.outputs.DEPS_PROJECT }}
      platforms:  ${{ needs.Prepare.outputs.PLATFORMS }}
      docker-dir: ${{ needs.Prepare.outputs.DOCKER_DIR }}
      build-args: DOTNET_VERSION=${{ needs.Prepare.outputs.DOTNET_VERSION }}

  CLI_Debian:
    needs: [Prepare, Deps_Debian]
    uses: ./.github/workflows/Docker_Build_Push.yml
    with:
      os_id:      debian
      verall:     ${{ needs.Prepare.outputs.verall }}
      vertwo:     ${{ needs.Prepare.outputs.vertwo }}
      images:     ghcr.io/${{ github.actor }}/${{ needs.Prepare.outputs.CLI_PROJECT }}
      project:    ${{ needs.Prepare.outputs.CLI_PROJECT }}
      platforms:  ${{ needs.Prepare.outputs.PLATFORMS }}
      docker-dir: ${{ needs.Prepare.outputs.DOCKER_DIR }}
      build-args: REPO=ghcr.io/${{ github.actor }}/${{ needs.Prepare.outputs.DEPS_PROJECT }}:latest

  WEBServer_Debian:
    needs: [Prepare, Deps_Debian]
    uses: ./.github/workflows/Docker_Build_Push.yml
    with:
      os_id:      debian
      verall:     ${{ needs.Prepare.outputs.verall }}
      vertwo:     ${{ needs.Prepare.outputs.vertwo }}
      images:     ghcr.io/${{ github.actor }}/${{ needs.Prepare.outputs.BACK_END_PROJECT }}
      project:    ${{ needs.Prepare.outputs.BACK_END_PROJECT }}
      platforms:  ${{ needs.Prepare.outputs.PLATFORMS }}
      docker-dir: ${{ needs.Prepare.outputs.DOCKER_DIR }}
      build-args: REPO=ghcr.io/${{ github.actor }}/${{ needs.Prepare.outputs.DEPS_PROJECT }}:latest
